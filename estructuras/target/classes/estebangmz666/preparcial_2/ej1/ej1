Convertir las siguientes expresiones a notación prefija y postfija y hacer la evaluación de la expresión en posfija, obtener el resultado usando la tabla de evaluación

((3*(6+(8*3^2)-1)*1)*29)-20

Postfix Notation
x = 3 ^ 2
x = 3 2 ^

y = 8 * x
y = 8 x * 
y = 8 3 2 ^ *

z = 6 + y
z = 6 y + 
z = 6 8 3 2 ^ * +

a = z - 1
a = z 1 -
a = 6 8 3 2 ^ * + 1 -

b = 3 * a
b = 3 a * 
b = 3 6 8 3 2 ^ * + 1 - * 

c = b * 1
c = b 1 * 
c = 3 6 8 3 2 ^ * + 1 - * 1 * 

d = c * 29
d = c 29 * 
d = 3 6 8 3 2 ^ * + 1 - * 1 * 29 * 

e = d - 20
e = d 20 -
e = 3 6 8 3 2 ^ * + 1 - * 1 * 29 * 20 -

Prefix Notation

x = 3 ^ 2
x = ^ 3 2

y = 8 * x
y = * 8 x
y = * 8 ^ 3 2

z = 6 + y
z = + 6 y
z = + 6 * 8 ^ 3 2

a = z - 1
a = - z 1
a = - + 6 * 8 ^ 3 2 1

b = 3 * a
b = * 3 a
b = * 3 - + 6 * 8 ^ 3 2 1

c = b * 1
c = * b 1
c = * * 3 - + 6 * 8 ^ 3 2 1 1

d = c * 29
d = * c 29
d = * * * 3 - + 6 * 8 ^ 3 2 1 1 29

e = d - 20
e = - d 20
e = - * * * 3 - + 6 * 8 ^ 3 2 1 1 29 20

Postifx Evaluation

stack = 3 6 8 3 2 ^ * + 1 - * 1 * 29 * 20 -

| Read Token | Acción                                                     | Stack (de abajo hacia arriba) |
| ---------- | ---------------------------------------------------------- | ----------------------------- |
| 3          | stack.push(3)                                              | 3                             |
| 6          | stack.push(6)                                              | 6 3                           |
| 8          | stack.push(8)                                              | 8 6 3                         |
| 3          | stack.push(3)                                              | 3 8 6 3                       |
| 2          | stack.push(2)                                              | 2 3 8 6 3                     |
| ^          | Op2 = 2, Op1 = 3 → 3^2 = 9 → stack.push(9)                 | 9 8 6 3                       |
| \*         | Op2 = 9, Op1 = 8 → 8 \* 9 = 72 → stack.push(72)            | 72 6 3                        |
| +          | Op2 = 72, Op1 = 6 → 6 + 72 = 78 → stack.push(78)           | 78 3                          |
| 1          | stack.push(1)                                              | 1 78 3                        |
| -          | Op2 = 1, Op1 = 78 → 78 - 1 = 77 → stack.push(77)           | 77 3                          |
| \*         | Op2 = 77, Op1 = 3 → 3 \* 77 = 231 → stack.push(231)        | 231                           |
| 1          | stack.push(1)                                              | 1 231                         |
| \*         | Op2 = 1, Op1 = 231 → 231 \* 1 = 231 → stack.push(231)      | 231                           |
| 29         | stack.push(29)                                             | 29 231                        |
| \*         | Op2 = 29, Op1 = 231 → 231 \* 29 = 6699 → stack.push(6699)  | 6699                          |
| 20         | stack.push(20)                                             | 20 6699                       |
| -          | Op2 = 20, Op1 = 6699 → 6699 - 20 = 6679 → stack.push(6679) | 6679                          |